from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.dispatcher import FSMContext
import logging, time, sqlite3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
from config import API_TOKEN
from modules.movie_bot import get_movie_info
from modules.weather import get_weather
from modules.news import get_news_from_24kg

logging.basicConfig(level=logging.INFO)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
connection = sqlite3.connect('customer.db')
cursor = connection.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cursor.execute("""
    CREATE TABLE IF NOT EXISTS users(
        id INTEGER PRIMARY KEY,
        first_name VARCHAR(100),
        last_name VARCHAR(100),
        username VARCHAR(100),
        date_joined VARCHAR(100)
    );
""")
cursor.connection.commit()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class Form(StatesGroup):
    waiting_for_movie = State()  # –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞
    waiting_for_city = State()  # –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–≥–æ–¥—ã

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
start_keyboard = [
    types.KeyboardButton("–§–∏–ª—å–º—ã"),
    types.KeyboardButton("–ü–æ–≥–æ–¥–∞"),
    types.KeyboardButton("–ù–æ–≤–æ—Å—Ç–∏"),
    types.KeyboardButton("–ó–∞–≥–∞–¥–∫–∏ –∏ –∞–Ω–µ–∫–¥–æ—Ç—ã")
]
start_button = types.ReplyKeyboardMarkup(resize_keyboard=True).add(*start_keyboard)

city_keyboard = [
    types.KeyboardButton("–ë–∏—à–∫–µ–∫"), types.KeyboardButton("–û—à"), types.KeyboardButton("–î–∂–∞–ª–∞–ª-–ê–±–∞–¥"),
    types.KeyboardButton("–ö–∞—Ä–∞–∫–æ–ª"), types.KeyboardButton("–ù–∞—Ä—ã–Ω"), types.KeyboardButton("–¢–∞–ª–∞—Å"),
    types.KeyboardButton("–ë–∞—Ç–∫–µ–Ω")
]
city_markup = types.ReplyKeyboardMarkup(resize_keyboard=True).add(*city_keyboard)

# –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–æ–≤
city_dict = {
    "–ë–∏—à–∫–µ–∫": "Bishkek",
    "–û—à": "Osh",
    "–î–∂–∞–ª–∞–ª-–ê–±–∞–¥": "Jalal-Abad",
    "–ö–∞—Ä–∞–∫–æ–ª": "Karakol",
    "–ù–∞—Ä—ã–Ω": "Naryn",
    "–¢–∞–ª–∞—Å": "Talas",
    "–ë–∞—Ç–∫–µ–Ω": "Batken"
}

def get_city_english(city_name):
    return city_dict.get(city_name, city_name)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands='start')
async def start(message: types.Message):
    cursor.execute("SELECT id FROM users WHERE id = ?", (message.from_user.id,))
    user_exists = cursor.fetchone()
    
    if not user_exists:
        cursor.execute("""INSERT INTO users (id, first_name, last_name, username, date_joined)
                          VALUES (?, ?, ?, ?, ?)""", (
            message.from_user.id, message.from_user.first_name,
            message.from_user.last_name, message.from_user.username,
            time.ctime()
        ))
        cursor.connection.commit()

    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=start_button)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–§–∏–ª—å–º—ã"
@dp.message_handler(text='–§–∏–ª—å–º—ã')
async def films(message: types.Message):
    await Form.waiting_for_movie.set()
    await message.reply("‚ùó –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:")

@dp.message_handler(state=Form.waiting_for_movie)
async def cmd_movie(message: types.Message, state: FSMContext):
    movie_name = message.text.strip()
    if not movie_name:
        await message.reply("‚ùó –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞.")
        return

    movie_info = get_movie_info(movie_name)
    await message.reply(movie_info, reply_markup=start_button)
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ü–æ–≥–æ–¥–∞"
@dp.message_handler(text='–ü–æ–≥–æ–¥–∞')
async def weather(message: types.Message):
    await Form.waiting_for_city.set()
    await message.reply("üåç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=city_markup)

@dp.message_handler(state=Form.waiting_for_city)
async def cmd_weather(message: types.Message, state: FSMContext):
    city = message.text.strip()

    if city not in city_dict:
        await message.reply("‚ùó –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    city_en = get_city_english(city)
    weather_text = await get_weather(city_en)
    
    await message.reply(weather_text, reply_markup=start_button)
    await state.finish()
    
    
    
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ù–æ–≤–æ—Å—Ç–∏"
@dp.message_handler(text='–ù–æ–≤–æ—Å—Ç–∏')
async def news(message: types.Message):
    news_text = await get_news_from_24kg()
    await message.answer(news_text, parse_mode=ParseMode.MARKDOWN, reply_markup=start_button)
    

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
